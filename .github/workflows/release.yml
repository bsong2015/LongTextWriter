# 工作流名称
name: Create Release and Upload Package

# 触发条件：当一个以 'v' 开头的标签被推送到仓库时
on:
  push:
    tags:
      - 'v*'

# 权限设置：需要写入内容的权限来创建 Release 和提交版本变更
permissions:
  contents: write

jobs:
  build-and-release:
    # 使用最新的 Ubuntu 虚拟机运行
    runs-on: ubuntu-latest
    steps:
      # 第一步：检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      # 第三步：安装项目依赖
      - name: Install dependencies
        run: npm install

      # 第四步：根据标签更新 package.json 版本
      - name: Update package version from tag
        run: |
          # 从 Git 引用 (例如 refs/tags/v1.2.0) 中提取版本号 (1.2.0)
          # 并将其设置为后续步骤可以使用的环境变量
          echo "VERSION=$(echo ${GITHUB_REF#refs/tags/v})" >> $GITHUB_ENV
      - run: |
          # 使用 npm version 命令更新所有 workspace 的版本号
          # --no-git-tag-version 确保不创建新的 tag
          npm version ${{ env.VERSION }} --no-git-tag-version --workspaces

      # 第五步：构建和打包项目
      - name: Build and create package
        run: |
          npm run build
          npm pack --workspaces

      # 第六步：提交版本更新
      # 将 package.json 和 package-lock.json 的版本更新提交回仓库
      - name: Commit version update
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(release): set version to ${{ env.VERSION }}"
          file_pattern: "**/package.json **/package-lock.json"

      # 第七步：创建 GitHub Release 并上传安装包
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # 自动根据从上一个标签到当前标签的提交记录生成发布说明
          generate_release_notes: true
          # 找到由 'npm pack' 命令生成的 .tgz 文件并将其作为附件上传
          files: "*.tgz"
